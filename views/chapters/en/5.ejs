<a name="moreonlanguages" class="anchor"></a>
<h2>More on Languages</h2>
<p>Our goal thus far has been to learn about programming in general, regardless of the language and its libraries. For this reason, we've looked at things that exist no matter what language you use. How you define a variable, or the exact syntax of <code>for</code> loop is secondary to the concept of variables and looping.</p>

<p>In this chapter we'll continue down this same path, but with a slightly broader perspective. Specifically, we want to familiarize ourselves with some of the other common things we are likely to see in a program. Some of these are just shortcuts provided by the language, or different approaches some languages take. Hopefully by learning these you'll not only be in a better position to write more complex programs, but also be better able to understand other people's code.</p>

<a name="incrementing" class="anchor"></a>
<h3>Incrementing and Decrementing</h3>
<p>We've already seen a number of examples where we increment and decrement a value by some number:</p>

<pre data-language="ruby">i = i + 1
# or
account_balance = account_balance - withdrawal_amount</pre>

<p>Incrementing and decrementing values is such a common thing, that most languages provide alternative syntax:</p>

<pre data-language="ruby">i += 1
# or
account_balance -= withdrawal_amount</pre>

<p>The two versions are identical, the second one is simply less verbose by making use of the <code>+=</code> and <code>-=</code> operators. Not only is incrementing so common that we have this special syntax, but incrementing and decrementing by 1 is itself so common that many languages give us special syntax for that specific purpose:</p>

<pre data-language="ruby">i++

i--</pre>

<p>This is known as post-incrementing and post-decrementing. An alternative is to pre-increment or pre-decerement. he difference between them is all about the operator's precedence with respect to other operators. Consider:

<pre data-language="ruby">i = 5
total = i++
//vs
i = 5
total = ++i</pre>

<p>In both cases <code>i</code> will be equal to 6. However, in the first case, <code>i</code> is assigned to <code>total</code> and then incremented. Thus, <code>total</code> is 5. In the second case, <code>i</code> is incremented and then assigned to <code>total</code>. Thus, <code>total</code> is 6.</p>

<a name="stringsandvalues" class="anchor"></a>
<h3>Strings With Values</h3>
<p>You'll often want to display a message which includes variable values. There are three common ways to do this, but not all languages provide all three mechanisms.</p>

<p>The simplest to understand, and the one we've used so far, is to join the pieces together with the <code>+</code> operator:</p>

<pre data-language="ruby">name = prompt("What is your name?")
alert("Hello " + name)</pre>

<p>This works well for simple a message, but it can get quite messy for something even slightly complicated.</p>

<p>Another common approach is to have some type of string formatting function. Every language seems to have its own version, but it normally ends up looking something like:</p>

<pre data-language="ruby">name = prompt("What is your name?")
formatted = format("Hello %s", name)
alert(formatted)

# or, a more terse version:
name = prompt("What is your name?")
alert(format("Hello %s", name))</pre>

<p>Again, this varies a lot from one language to another, but in the above <code>%s</code> is a string placeholder, as opposed to a <code>%d</code> which is a digit placeholder. Writing such a <code>format</code> function in most languages wouldn't be too difficult (assuming one didn't already exist).</p>

<p>The last approach that you'll often see is the ability to put variables directly in your string, by wrapping it in a special sequence of characters:</p>

<pre data-language="ruby">name = prompt("What is your name?")
alert("Hello #{name}")</pre>

<p>The exact syntax will vary from language to language, and many languages don't even support this approach.</p>

<a name="stringescape" class="anchor"></a>
<h3>Strings and Escape Sequences</h3>
<p>Sometimes you'll want to include a special character within a string. The most common example is a double quote. However, a computer can't make sense of the following since it means something special within the language itself (the start or end of a string). It might be obvious to you and me where the following string meant to end, but a computer can't tell:</p>

<pre data-language="ruby">message = "And he said "to get to the other side""</pre>

<p>To avoid this ambiguity, languages tend to have an escape character, and that tends to be the backslash <code>\</code>:</p>

<pre data-language="ruby">message = "And he said \"to get to the other side\""</pre>

<p>When you want to print an actual backslash, you simply escape it:</p>

<pre data-language="ruby">message = "I'm printing a backslash like so \\"</pre>

<p>Finally, if you want to output a tab or new line, you can use the special <code>\t</code> or <code>\n</code> sequence. <code>\n</code> is a line feed. To get a new line to display properly on some operating systems, you'll have to print out a carriage return <code>\r</code> followed by a line feed: <code>\r\n</code>.</p>

<a name="loops" class="anchor"></a>
<h3>Loops</h3>
<p><code>for</code> loops aren't the only type of looping mechanism available in most languages. Two other common ones are the <code>while</code> and <code>do/while</code> loop. In general, a <code>for</code> loop can be thought of as iterating through a collection of values. A <code>while</code> and <code>do/while</code> loop iterate so long as a condition is true. They are both similar in that, the <code>for</code> loop's condition is implied to be: <em>is there another value?</em>. For example, we could iterate through a collection of values using a <code>while</code> loop like so: </p>

<pre data-language="ruby">i = 0
while i &lt; deck.length
  if deck[i] == 'Joker'
    # .. do something
  i += 1</pre>


<p>With both a <code>while</code> and <code>for</code> loop it is possible for no iterations to take place if the condition is initially false or the collection is empty. A <code>do/while</code> places the condition at the end, and thus will execute at least once:</p>

<pre data-language="ruby">do
  name = prompt("What is your name?")
  alert("Hello " + name)
while name != "Joker"</pre>

<p>Generally speaking you'll see <code>for</code> the most often, then <code>while</code> and finally <code>do/while</code>.</p>

<a name="inthischapter" class="anchor"></a>
<h3>In This Chapter</h3>
<p>This chapter introduced new keywords and operations which many languages make available. Some of these may seem minor, that's because some are. Understanding the concepts behind variables and conditions to control execution is a lot more important than knowing that <code>i++</code> is a quick way to do <code>i = i + 1</code>. However, as soon as you start exploring other guides and sample programs, these are things that you'll imediately run into.</p>

<p>For the time being, you might be uncertain about what's the best approach to use for a given piece of code. What loop should you use, or how should you mix strings and values? At first, worry about making your code do what you want it to do. With experience, both from reading other people's code, and expanding your own, you'll gain a feel for what improves and what detracts from your code's readability.</p>
