<a name="nextsteps" class="anchor"></a>
<h2>Next Steps</h2>
<p>The world of programming is vast, but you've taken the first step. There are a number of advanced, yet fundamental, topics still worth exploring. There's an even greater number of higher-level concepts and tools that might interest you. Even though you could continue to learn about programming in general, a more specific route would yield more tangible benefits.</p>

<p>In this chapter we'll look at where you can go from here. Generally speaking, where you go is defined by what you want to do. Do you want to build mobile applications or websites? Do you need to deal with data and report or maybe weave some spreadsheet magic? Each of these fields tend to have their own languages. But learning a new language isn't the challenge. What's truly difficult about learning a new field of programming are the libraries and constraints specific to that field or technology. The way that you display an input field on a website is different than how you do it on an iPhone. Similarly, the challenges of dealing with different browsers and slow internet speeds are different than those of dealing with limited battery life and a touch-based interface.</p>

<a name="learnandteach" class="anchor"></a>
<h3>A Tip On Learning</h3>
<p>We all learn differently. Some like to read, some like videos, others have to get their hands dirty. There's one strategy that I've used which I'd like to share with you: learn by helping. Whenever I'm learning something new, I join the forums and hang around in the groups and try to answer whatever questions I can. At first, I can't answer anything. But I read the questions people have, spend a bit of time trying to figure it out, and read the replies they get. Eventually, someone asks a question that I know the answer to. That first "thanks" reply is quite satisfying; as is the pace at which you find yourself able to answer additional questions.</p>

<p>Maybe this trick won't work for you, but I suggest you try it. Many communities have their own forums and groups where anybody can ask questions and anybody can answer. Alternatively, you can try a more generic help site like <a href="http://stackoverflow.com">StackOverflow</a>. You can follow only those topics which interest you, ask questions when you need help, and answer questions when you can.</p>

<p>Also, practice! Programming is about experience and practicing is the key. Don't worry about making mistakes, as it's one of the best ways to learn.</p>

<p>Finally, most of the day-to-day programming that goes on isn't a hard science. Despite what you might read, there isn't necessarily one best way to solve a problem. There certainly isn't one best tool, or one best language. Keep this in mind when getting advice.</p>

<a name="websites" class="anchor"></a>
<h3>Websites</h3>
<p>Of all the technologies that may interest you, programming websites is likely the most daunting for two important reasons. First of all, there's so much choice in technologies and tools, that it's simply overwhelming. Which do you pick and where do you start? Secondly, in order to create a meaningful website, you need to know 5 different technologies. HTML, CSS and JavaScript can be thought of controlling everything the user sees and interacts with. You then need a language that does all the behind the scenes work - like saving users. Finally, most websites rely on some type of database to store data. Individually, these aren't hard to learn (you can put together a simpe HTML page in a few minutes). But combined, it's a bit crazy.</p>

<p>However, of all the technologies, you won't find better resources than those available to web programmers. Using Google you can find endless guides, tutorials, videos and blog posts that cover each of these technologies - both separately as well as how they come together. It's a passionate and mature community. Furthermore, the web is the most accessible platform available. Build something for the web and anyone can use it.</p>

<p>While there truly is too much choice, I feel comfortable in recommending two specific technologies: PHP and Python.</p>

<p>PHP is the most established and most popular language for the web. It will be the simplest thing to learn, and also one of the best documented. The downside of PHP is that it isn't particularly elegant and many of the concepts are dated. Also, PHP is almost exclusively used for the web. While much of the core experience you gain using it is transferable, the language and libraries itself aren't. The <a href="http://php.net/">official PHP website</a>, while intimidating at first, is a good place to start.</p>

<p>Unlike PHP, which is both a language and a framework, <a href="http://www.python.org/">Python</a> is just the language. For web-based applications, you'll want to pair it with an appropriate framework. <a href="https://www.djangoproject.com/">Django</a> is a popular choice with excellent documentation. Python is modern and popular for tasks other than websites, making it a more useful language than PHP. Python web frameworks, like Django, are more elegant and promote good approaches to programming. Furthermore, the Python community as a whole tend to write excellent documentation and guides.</p>

<p><a href="http://learnpythonthehardway.org/">Learn Python The Hard Way</a> is a great ebook you can use to master Python. You can read the book online for free, or pay for a pdf or epub.</p>

<a name="mobile" class="anchor"></a>
<h3>Mobile Applications</h3>
<p>If you are interested in writing mobile applications, the choice is much simpler. If you want to target Apple-based devices (iPhones and iPads), you'll want to learn the Objective-C language and the Cocoa framework. <a href="https://developer.apple.com/">Apple's developer center</a> is the right place to start. To write iOS applications you'll need an Apple computer as well as XCode, which you can download for free from the app store.</p>

<p>For Android-based devices, you can head over to <a href="http://developer.android.com/index.html">Google's Android developer zone</a>. Android applications are built using Java (which has no relationship to JavaScript). The tools are free and can be run on all popular operating systems.</p>

<a name="desktop" class="anchor"></a>
<h3>Windows</h3>
<p>For anything relating to Windows, you'll likely want to learn C# and check out <a href="http://msdn.microsoft.com/">MSDN</a>. Of all the technologies listed here, Microsoft's documentation is the worst - likely because it's such a large ecosystem. Microsoft has a number of free tools under its <em>Express</em> brand, which are a great way to get started.</p>

<a name="database" class="anchor"></a>
<h3>Database</h3>
<p>There are a number of databases available, but thankfully they all use a standard language known as SQL (Structured Query Language). Different databases do extend SQL with their own extensions, but once you know the fundamentals, everything else easily falls into place. A big part of learning a database isn't the language, but rather how to model your data and how to effectively query it.</p>

<p>It doesn't matter which database you pick, but if you don't have any existing preferences, I'd suggest you look at <a href="http://www.postgresql.org/">PostgreSQL</a>. It's free, runs on most operating systems, has good documentation and a strong community.</p>


<a name="conclusion" class="anchor"></a>
<h3>Conclusion</h3>
<p>A challenge of learning and teaching programming is how long it takes before something tangible can be created. In this respect, this book has failed you. You didn't create anything meaningful and there's still much to learn before you can do so.</p>

<p>Despite this, I'm hopeful that you don't feel like your time has been wasted; nor that you are discouraged. Even if you've spent all this time and many things remain unclear, don't be dissapointed. As you start to turn this theory into practical solutions, much will become clear. In some ways, we've barely taken a step forward. But we have oriented ourselves, ensured that we have the basic provisions, and properly readied ourselves for our journey.</p>

<p>Thank you.</p>
